// Set MongoDB as the provider for all models
generator client {
  provider = "prisma-client-js"
}

// Set MongoDB as the provider for each model
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Account model for MongoDB
model Account {
id              String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  refresh_token_expires_in   String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session model for MongoDB
model Session {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String     @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User model for MongoDB
model User {
id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
}

// VerificationToken model for MongoDB
model VerificationToken {
id              String       @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@index([identifier, token], name: "unique_token") // Index to ensure uniqueness

  // Other model-specific configurations if needed
}


model Movie {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  imageString  String
  title        String
  age          Int
  duration     Float
  overview     String
  release      Int
  videoSource  String
  category     String
  youtubeString String
  createdAt    DateTime @default(now())
  watchLists   WatchList[]  // Define the relation here
}

model WatchList {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  movieId   String?
  movie     Movie?       @relation(fields: [movieId], references: [id])
}